//
//  HappyActionIcons.m
//  hAppy
//
//  Created by Dominik Hauser on 02.10.14.
//  Copyright (c) 2014 Dominik Hauser. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "HappyActionIcons.h"


@implementation HappyActionIcons

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawReplyWithSize: (CGSize)size;
{

    //// Frames
    CGRect frame = CGRectMake(0, 0, size.width, size.height);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 25.5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 10.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 14.55) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 10.5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 23.5, CGRectGetMinY(frame) + 8.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 10.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 9.5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 19.5, CGRectGetMinY(frame) + 7.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 22.5, CGRectGetMinY(frame) + 7.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 19.5, CGRectGetMinY(frame) + 7.5)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 7.5)];
    bezierPath.lineCapStyle = kCGLineCapRound;

    bezierPath.lineJoinStyle = kCGLineJoinRound;

    [UIColor.blackColor setStroke];
    bezierPath.lineWidth = 2;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 12.5, CGRectGetMinY(frame) + 3.5)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 7.5)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 12.5, CGRectGetMinY(frame) + 11.5)];
    bezier2Path.lineCapStyle = kCGLineCapRound;

    bezier2Path.lineJoinStyle = kCGLineJoinRound;

    [UIColor.blackColor setStroke];
    bezier2Path.lineWidth = 2;
    [bezier2Path stroke];
}

+ (void)drawRepostWithSize: (CGSize)size;
{

    //// Frames
    CGRect frame = CGRectMake(0, 0, size.width, size.height);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 19.5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 7.83) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 10.98) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 7.83)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 23.5, CGRectGetMinY(frame) + 6.28) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 7.83) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 7.06)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 19.5, CGRectGetMinY(frame) + 5.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 22.5, CGRectGetMinY(frame) + 5.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 19.5, CGRectGetMinY(frame) + 5.5)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 5.5)];
    bezierPath.lineCapStyle = kCGLineCapRound;

    bezierPath.lineJoinStyle = kCGLineJoinRound;

    [UIColor.blackColor setStroke];
    bezierPath.lineWidth = 2;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 12.5, CGRectGetMinY(frame) + 1.5)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 5.5)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 12.5, CGRectGetMinY(frame) + 9.5)];
    bezier2Path.lineCapStyle = kCGLineCapRound;

    bezier2Path.lineJoinStyle = kCGLineJoinRound;

    [UIColor.blackColor setStroke];
    bezier2Path.lineWidth = 2;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 9.5)];
    [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 21.17) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 18.02) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 21.17)];
    [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.5, CGRectGetMinY(frame) + 22.72) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 21.17) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 21.94)];
    [bezier3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 10.5, CGRectGetMinY(frame) + 23.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 7.5, CGRectGetMinY(frame) + 23.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 10.5, CGRectGetMinY(frame) + 23.5)];
    [bezier3Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 23.5)];
    bezier3Path.lineCapStyle = kCGLineCapRound;

    [UIColor.blackColor setStroke];
    bezier3Path.lineWidth = 2;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
    [bezier4Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 17.5, CGRectGetMinY(frame) + 27.5)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 24.5, CGRectGetMinY(frame) + 23.5)];
    [bezier4Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 17.5, CGRectGetMinY(frame) + 19.5)];
    bezier4Path.lineCapStyle = kCGLineCapRound;

    bezier4Path.lineJoinStyle = kCGLineJoinRound;

    [UIColor.blackColor setStroke];
    bezier4Path.lineWidth = 2;
    [bezier4Path stroke];
}

+ (void)drawFavWithSize: (CGSize)size;
{

    //// Frames
    CGRect frame = CGRectMake(0, 0, size.width, size.height);


    //// Star Drawing
    UIBezierPath* starPath = UIBezierPath.bezierPath;
    [starPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 15, CGRectGetMinY(frame) + 2.5)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 18.82, CGRectGetMinY(frame) + 10.69)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 27.36, CGRectGetMinY(frame) + 12)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 21.18, CGRectGetMinY(frame) + 18.37)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 22.64, CGRectGetMinY(frame) + 27.37)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 15, CGRectGetMinY(frame) + 23.12)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 7.36, CGRectGetMinY(frame) + 27.37)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 8.82, CGRectGetMinY(frame) + 18.37)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 2.64, CGRectGetMinY(frame) + 12)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 11.18, CGRectGetMinY(frame) + 10.69)];
    [starPath closePath];
    [UIColor.blackColor setStroke];
    starPath.lineWidth = 2;
    [starPath stroke];
}

+ (void)drawConversationWithSize: (CGSize)size;
{

    //// Frames
    CGRect frame = CGRectMake(0, 0, size.width, size.height);


    //// Oval Drawing
    UIBezierPath* ovalPath = UIBezierPath.bezierPath;
    [ovalPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.10000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.90000 * CGRectGetHeight(frame))];
    [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.30000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76667 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.11331 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.90689 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.28583 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76133 * CGRectGetHeight(frame))];
    [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66415 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72190 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.43082 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81593 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.55524 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.80487 * CGRectGetHeight(frame))];
    [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.66415 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34477 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.80084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.61776 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.80084 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.44891 * CGRectGetHeight(frame))];
    [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16918 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34477 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.52747 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24063 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.30586 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24063 * CGRectGetHeight(frame))];
    [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16918 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72190 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.03250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.44891 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.03250 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.61776 * CGRectGetHeight(frame))];
    [ovalPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.10000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.90000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.18515 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73407 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.08198 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.89067 * CGRectGetHeight(frame))];
    [ovalPath closePath];
    [UIColor.blackColor setStroke];
    ovalPath.lineWidth = 2;
    [ovalPath stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = UIBezierPath.bezierPath;
    [oval2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.90000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76667 * CGRectGetHeight(frame))];
    [oval2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.70000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.63333 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.88669 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77355 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.71417 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62800 * CGRectGetHeight(frame))];
    [oval2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33585 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.58856 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.56918 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68259 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.44476 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67154 * CGRectGetHeight(frame))];
    [oval2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.33585 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.21144 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.19916 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.48442 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.19916 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31558 * CGRectGetHeight(frame))];
    [oval2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83082 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.21144 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.47253 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.10730 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.69414 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.10730 * CGRectGetHeight(frame))];
    [oval2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83082 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.58856 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.96750 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31558 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.96750 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.48442 * CGRectGetHeight(frame))];
    [oval2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.90000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76667 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.81485 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60073 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.91802 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75734 * CGRectGetHeight(frame))];
    [oval2Path closePath];
    [UIColor.blackColor setFill];
    [oval2Path fill];
    [UIColor.blackColor setStroke];
    oval2Path.lineWidth = 2;
    [oval2Path stroke];
}

+ (void)drawFavedWithSize: (CGSize)size;
{

    //// Frames
    CGRect frame = CGRectMake(0, 0, size.width, size.height);


    //// Star Drawing
    UIBezierPath* starPath = UIBezierPath.bezierPath;
    [starPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 15, CGRectGetMinY(frame) + 2.5)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 18.82, CGRectGetMinY(frame) + 10.69)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 27.36, CGRectGetMinY(frame) + 12)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 21.18, CGRectGetMinY(frame) + 18.37)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 22.64, CGRectGetMinY(frame) + 27.37)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 15, CGRectGetMinY(frame) + 23.12)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 7.36, CGRectGetMinY(frame) + 27.37)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 8.82, CGRectGetMinY(frame) + 18.37)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 2.64, CGRectGetMinY(frame) + 12)];
    [starPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 11.18, CGRectGetMinY(frame) + 10.69)];
    [starPath closePath];
    [UIColor.blackColor setFill];
    [starPath fill];
    [UIColor.blackColor setStroke];
    starPath.lineWidth = 2;
    [starPath stroke];
}

#pragma mark Generated Images

+ (UIImage*)imageOfReplyWithSize: (CGSize)size;
{
    UIGraphicsBeginImageContextWithOptions(size, NO, 0.0f);
    [HappyActionIcons drawReplyWithSize: size];
    UIImage* imageOfReply = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return imageOfReply;
}

+ (UIImage*)imageOfRepostWithSize: (CGSize)size;
{
    UIGraphicsBeginImageContextWithOptions(size, NO, 0.0f);
    [HappyActionIcons drawRepostWithSize: size];
    UIImage* imageOfRepost = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return imageOfRepost;
}

+ (UIImage*)imageOfFavWithSize: (CGSize)size;
{
    UIGraphicsBeginImageContextWithOptions(size, NO, 0.0f);
    [HappyActionIcons drawFavWithSize: size];
    UIImage* imageOfFav = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return imageOfFav;
}

+ (UIImage*)imageOfConversationWithSize: (CGSize)size;
{
    UIGraphicsBeginImageContextWithOptions(size, NO, 0.0f);
    [HappyActionIcons drawConversationWithSize: size];
    UIImage* imageOfConversation = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return imageOfConversation;
}

+ (UIImage*)imageOfFavedWithSize: (CGSize)size;
{
    UIGraphicsBeginImageContextWithOptions(size, NO, 0.0f);
    [HappyActionIcons drawFavedWithSize: size];
    UIImage* imageOfFaved = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return imageOfFaved;
}

@end
